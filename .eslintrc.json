{
    "env": {
        "browser": true,
        "es6": true
    },
    "ignorePatterns": ["dist", "node_modules"],
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:promise/recommended",
        "plugin:sonarjs/recommended",
        "plugin:react-hooks/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "plugin:prettier/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "tsconfig.json",
        "tsconfigRootDir": "."
    },
    "plugins": [
        "react",
        "react-hooks",
        "promise",
        "optimize-regex",
        "sonarjs",
        "@typescript-eslint",
        "prettier"
    ],
    "rules": {
        "import/no-default-export": "warn",
        "import/order": "error",
        "no-shadow": ["error"],
        "no-duplicate-imports": ["error", { "includeExports": true }],
        "no-template-curly-in-string": "error",
        "block-scoped-var": "error",
        "curly": ["error", "all"],
        "eqeqeq": "error",
        "max-classes-per-file": ["error", 1],
        "no-alert": "warn",
        "no-console": "warn",
        "no-implicit-coercion": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-multi-spaces": "error",
        "no-negated-condition": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-return-await": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-unused-expressions": ["error", { "allowShortCircuit": true, "allowTernary": true }],
        "no-useless-call": "error",
        "no-useless-concat": "error",
        "no-useless-return": "error",
        "prefer-promise-reject-errors": "error",
        "radix": "error",
        "no-undefined": "error",
        "array-bracket-newline": ["error", "consistent"],
        "comma-dangle": ["error", "always-multiline"],
        "comma-style": "error",
        "eol-last": "error",
        "key-spacing": "error",
        "keyword-spacing": "error",
        "new-parens": "error",
        "no-bitwise": "warn",
        "no-lonely-if": "warn",
        "no-multiple-empty-lines": "error",
        "no-nested-ternary": "error",
        "no-new-object": "error",
        "no-trailing-spaces": "error",
        "no-unneeded-ternary": "error",
        "no-whitespace-before-property": "error",
        "object-curly-newline": "error",
        "object-curly-spacing": ["error", "always"],
        "semi-spacing": "error",
        "space-before-blocks": "error",
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "always",
                "named": "never",
                "asyncArrow": "always"
            }
        ],
        "space-in-parens": "error",
        "space-infix-ops": "error",
        "space-unary-ops": "error",
        "switch-colon-spacing": "error",
        "arrow-body-style": ["error", "as-needed"],
        "arrow-spacing": "error",
        "generator-star-spacing": ["error", "after"],
        "no-useless-computed-key": "error",
        "no-useless-rename": "error",
        "object-shorthand": ["error", "always"],
        "prefer-arrow-callback": "warn",
        "prefer-destructuring": "off",
        "rest-spread-spacing": ["error", "never"],
        "template-curly-spacing": "error",
        "promise/prefer-await-to-then": "warn",
        "promise/always-return": "off",
        "optimize-regex/optimize-regex": "warn",
        "@typescript-eslint/member-delimiter-style": ["error", { "multiline": { "delimiter": "semi" } }],
        "@typescript-eslint/member-ordering": "off", // иначе ругается на flow экшны mobx
        "@typescript-eslint/brace-style": ["error", "1tbs"],
        "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }],
        "@typescript-eslint/func-call-spacing": ["error", "never"],
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/no-parameter-properties": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-readonly": "warn",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/camelcase": "off", // https://github.com/typescript-eslint/typescript-eslint/issues/2077
        "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_$" }],
        "@typescript-eslint/no-floating-promises": ["off", { "ignoreVoid": true, "ignoreIIFE": true }],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/restrict-template-expressions": ["error", {"allowAny": true}],
        "@typescript-eslint/unbound-method": "warn",
        "react/no-access-state-in-setstate": "error",
        "react/no-danger": "error",
        "react/no-multi-comp": "warn",
        "react/no-this-in-sfc": "error",
        "react/prefer-stateless-function": "error",
        "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
        "react/jsx-no-bind": "off",
        "react/jsx-handler-names": ["error", {
            "checkLocalVariables": true
        }],
        "react/jsx-no-useless-fragment": "error",
        "react/jsx-pascal-case": "error",
        "react-hooks/rules-of-hooks": "error",
        "react/prop-types": "off",
        "react/react-in-jsx-scope": "off",
        "prettier/prettier": ["error"],
        "sonarjs/cognitive-complexity": "off",
        "sonarjs/no-duplicate-string": "off"
    }
}
